
#include <Servo.h>
#include "AIStarter.h"
Servo myservo;       //创建角度舵机对象
#define IR_NUM 6     //循线模块的数量
#define IR_DIS 12    //mm
#define DBG_EN 1     //状态常量
#define MAX_SPEED 70
#define MID_SPEED 50
int back_flag = 0;   //检测到黑线标记位（起点和装载区的检测）
int stop_count = 0;  //每经过一次黑线记录一次
int goods_flag = 0;  /*0：空车（起点到装载区路段）   1：满载 （装载区到卸货点路段）
                           2：完成装货任务（卸货点到终点、起始点路段）*/
int goods_count = 0; //变量用于记录运货次数
int road = 0;
int goods_color = 0;    //当前所放积木块的颜色标记变量
int num = 0, path = 0;  //变量用于问题物料的处理
int timenum = 0;        //固定循线次数控制变量
String comdata = "";    //存放XBee接收数据
int flag_back_line = 0; // 全黑线经过次数
float Kp = 2;           //影响每一次的转动情况
float Ki = 0.001;
float Kd = 10; //上一次结果 和一直一次误差的影响 可以修改比较小
float error = 0, P = 0, I = 0, D = 0, PID_value = 0;
float previous_error = 0, previous_I = 0;
int insert = 0;
int color_flag = 1;
int c_f = 0;
int  check = 1;
void setup()
{
  Serial.begin(115200); //主板串口波特率设置
  Serial2.begin(9600);  //Xbee模块的波特率设置
  myservo.attach(7);    //翻斗模块的角度舵机使能，7位翻斗模块的控制引脚
  myservo.write(0);     //初始化时让翻斗模块复位
  delay(1000);
  //  MobilePlatform_SmartBotSetKeyInit();
  myservo.detach();    /*释放掉角度舵机（角度舵机的脉冲控制使用的是中断1，与智能小车定时计数的中断函数冲突，造成不稳定，
                                  每次使用完翻斗模块后，需要释放舵机，不然翻斗模块会一直抖动）*/
  pinMode(11, OUTPUT); //蜂鸣器引脚设置为输出，高电平响，低电平关闭
  pinMode(7, OUTPUT);
  pinMode(35, OUTPUT);
  //digitalWrite(7, LOW);     //设置7号引脚电位，保证翻斗模块不用时稳定
  AIStarter_SmartBotInit(); //智能小车初始化服 
  Serial.println("SmartBotInit is completed");
  AIStarter_SmartBotSetLED(LED1, BLINK); //LED1的设置
  AIStarter_SmartBotSetColorWB(0);       //左颜色传感器白平衡
  AIStarter_SmartBotSetColorWB(1);       //右颜色传感器白平衡

  while (1)
  {
    if (!digitalRead(35))
    {

      break;
    }
    Serial.println("wait ");
  }

  digitalWrite(11, OUTPUT);
  delay(300);
  digitalWrite(11, LOW);
  delay(1000);
}
/*************************************************
   函数功能：获取6路红外传感器状态
   入口参数：*irstate：存放6路红外状态的指针
   返回值  ：curPos
   
 ************************************************/
void getCurrentIRState(int *irstate)
{
  *irstate = 0;
  for (int i = 0; i < IR_NUM; i++)
  {
    *irstate |= AIStarter_SmartBotGetIRModuleValue(i) << i;
  }
}
/********************************
 * 用的rgb测的
 * G的值加40比较好 得出绿色 其他值不变 
 * 
 * 官方demo
 * 
 * 
 ********************************/
int Get_color()
{
  int color = 0;
   
  if (AIStarter_SmartBotGetColorSenor(0, 0) - AIStarter_SmartBotGetColorSenor(0, 1) > 50 && AIStarter_SmartBotGetColorSenor(1, 0) - AIStarter_SmartBotGetColorSenor(1, 1) > 50) //R
    color = 1;
 
  else if (AIStarter_SmartBotGetColorSenor(0, 0) + AIStarter_SmartBotGetColorSenor(0, 1) < AIStarter_SmartBotGetColorSenor(0, 2) + 50 && AIStarter_SmartBotGetColorSenor(1, 0) + AIStarter_SmartBotGetColorSenor(1, 1) < AIStarter_SmartBotGetColorSenor(1, 2) + 50) //B
  {
    color = 3;
    c_f = 1;
  }
     else if (AIStarter_SmartBotGetColorSenor(0, 0) + AIStarter_SmartBotGetColorSenor(0, 2) < AIStarter_SmartBotGetColorSenor(0, 1) + 70 && AIStarter_SmartBotGetColorSenor(1, 0) + AIStarter_SmartBotGetColorSenor(1, 2) < AIStarter_SmartBotGetColorSenor(1, 1) + 70) //G
     {

      if(c_f){
    color = 2;

  
       c_f  = 0;
      }
}


  else
    color = 0;
  return color;
}

void get_value(){


//  Serial.println('R');
 // Serial.println(AIStarter_SmartBotGetColorSenor(0, 0) - AIStarter_SmartBotGetColorSenor(0, 1));

  
//  Serial.println('G');
 //Serial.println(AIStarter_SmartBotGetColorSenor(0, 0) + AIStarter_SmartBotGetColorSenor(0, 2) - AIStarter_SmartBotGetColorSenor(0, 1));
//  delay(100);
//  
//  Serial.println('B');
  Serial.println(AIStarter_SmartBotGetColorSenor(0, 0) + AIStarter_SmartBotGetColorSenor(0, 1) - AIStarter_SmartBotGetColorSenor(0, 2));
//  delay(100);
  
}

/*************************************************
 * 官方demo
 * 好用我就拿过来了
   函数功能：根据每一次次数调整位置 
   入口参数：无
   返回值  ：无
 ************************************************/
void turn(int gotime, int left, int right)
{
  int i;
  for (i = 0; i < gotime; i++)
  {
    AIStarter_SmartBotSetMotor(MOTORL, left);
    AIStarter_SmartBotSetMotor(MOTORR, right);
    delay(2);
  }
}

/*移动函数 
*
*By_lxd
*/
void move(int left, int right)
{

  AIStarter_SmartBotSetMotor(MOTORR, right);
  AIStarter_SmartBotSetMotor(MOTORL, left);
}
void Stop()
{
  move(0, 0);
  delay(100);
}

/*
*pid 这个不解释
*By_lxd
*/
void pid()
{

  P = error; // 0

  I = I + previous_I; // 0

  D = error - previous_error; // 0
  //Serial.println(D);
  //Serial.println(D);
  PID_value = (Kp * P) + (Ki * I) + (Kd * D); // 25* 0 +  0 * 0 + 15 *0
  previous_I = I;
  previous_error = error;

  //Serial.println(PID_value);
}
/*读取前面光电值 数据被归一化了 然后我做了分段  
*
*By_lxd
*/
void read_sensor_values()
{

  int Sensor_Sum = 0;
  Sensor_Sum = AIStarter_SmartBotGetCarHeadOffset();
  // Serial.println("sum");
  // Serial.println(Sensor_Sum);

  if (Sensor_Sum >= -30 && Sensor_Sum < -18)
  {
    error = -5;
  }
  else if (Sensor_Sum >= -18 && Sensor_Sum < -12)
  {
    error = -2;
  }
  else if (Sensor_Sum >= -12 && Sensor_Sum < -6)
  {
    error = -1;
  }
 else if(Sensor_Sum>=-6 && Sensor_Sum<6){
    error = 0;
}

  else if (Sensor_Sum >= 6 && Sensor_Sum < 12)
  {
    error = 1;
  }
  else if (Sensor_Sum >= 12 && Sensor_Sum <= 18)
  {
    error = 2;
  }
  else if (Sensor_Sum >= 18 && Sensor_Sum <= 30)
  {
    error = 5;
  }
  //Serial.println(error);
}

/*
*寻线程序
*By_Lxd
*/
void Found_Line(int l, int r,int speed)
{
  int a;
  getCurrentIRState(&a);

  read_sensor_values();
  pid();

  // Serial.println(error);

  if (error == -5)
  {

    move(l, r);
  }
  else if (error == 5)
  {

    move(r, l);
  }
  else
  {

    move(speed + PID_value, speed - PID_value); //左边-   右边 +
  }
}

void putgoods()
{
  delay(500);
  int pos = 0;
  AIStarter_SmartBotTimerTaskDetach();
  myservo.attach(7); //使能翻斗舵机
  myservo.write(0);
  delay(1000);
  for (pos = 0; pos <= 35; pos += 7)
  { //缓慢倾倒货物，每次倾斜5度，直到翻斗开到最大
    myservo.write(pos);
    delay(10);
  }
  delay(1000);
  for (pos = 35; pos >= 0; pos -= 5)
  { // 翻斗模块恢复到水平
    // in steps of 1 degree
    myservo.write(pos);
    delay(10);
  }
  delay(500);
  AIStarter_SmartBotTimerTaskAttach(); //重新开启中断1
  myservo.detach();                    //释放翻斗舵机
  pinMode(7, OUTPUT);
  digitalWrite(7, HIGH); //拉高电平，保证翻斗稳定
  delay(100);
}


void go_time(int distance)
{

  int timenum = 0;
  while (timenum < distance)
  { //20--1S
    //    Found_Line();
    delay(2);
    timenum++;
  }
}

void B_c()
{


    Found_Line(30, 100,MID_SPEED);
  
}

void linetime(int times)
{
  for (int i = 0; i < times; i++)
  {
    B_c();
    delay(5);
  }
}

void put_color_goods()
{
  linetime(200);
  Serial2.write('P');
      delay(50);
  int a = 0;
  move(0, 0);
  delay(200);
  turn(300, -50, -50);
  turn(400, -40, 40); //左转90度
  move(0, 0);
  delay(50);
  Serial2.write('P');
  delay(50);

  turn(400, -50, -50);
  move(0, 0);
  delay(200);
  putgoods();
  //turn(240, 120, 20);
  turn(400, 50, 50);
  move(0, 0);
  turn(400, 40, -40);
}

void Last_line()
{

  char sta=NULL;
  int i = 0;
  sta = Serial2.read();              //循线过程中不断检测另一接收到辆小车是否发来信息
  if (sta == 'S' && goods_flag != 1) //“S”,说明另一辆小车停止，如果goods_flag = 1，小车继续前进
  {                                  //如果goods_flag != 1，说明当前小车在另一辆小车后面，立即停止前进
    Stop();
    for (i = 0; i < 20; i++)
    {
      Serial2.read();
    }
    AIStarter_SmartBotXbeeClear();   //清空缓存
    while (!(Serial2.read() == 'M')) //直到接收到“M”小车跳出循环
    {
    }
  }
  if (sta == 'P' && goods_flag != 0) //小车如果接收到“P”,另一辆小车到达卸货点，goods_flag != 0，立即停止等待
  {
    Stop();
    for (i = 0; i < 20; i++)
    {
      Serial2.read();
    }
    AIStarter_SmartBotXbeeClear();   //清空缓存
    while (!(Serial2.read() == 'M')) //接收到“M”小车跳出循环，继续循线
    {
      
    }
  }

  Serial2.write('M');
  getCurrentIRState(&insert);
  if (insert == 63)
  {
    back_flag = 1;
  }
  if (insert != 63 && back_flag == 1)
  {

    flag_back_line++;
    back_flag = 0;
  }

  if (flag_back_line % 3 == 1)
  {

    Found_Line(30, 120,MAX_SPEED);
  }

  else
  {
    Found_Line(30, 100,MAX_SPEED);
  }
}
void count_Line()
{


  getCurrentIRState(&insert);
  if (insert == 63)
  {
    back_flag = 1;
  }

  if (insert != 63 && back_flag == 1)
  {

    flag_back_line++;
    back_flag = 0;
  }

  
    Found_Line(30, 130,MAX_SPEED);
  
}

void Dis_Line()
{

  if ( SonarDetect(1) <= 8) {
    Stop();
    delay(100);
    while (SonarDetect(1) <= 8 )
    {
      delay(1000);


    }
  }



  getCurrentIRState(&insert);
  if (insert == 63)
  {
    back_flag = 1;
  }

  if (insert != 63 && back_flag == 1)
  {

    flag_back_line++;
    back_flag = 0;
  }

  
    Found_Line(30, 100,MAX_SPEED);
  
}


void wait_get_goods()
{
  char val;
  int i = 0;
  color_flag = 1;
  while (1) //在死循环内一直等待数据
  {
    Serial2.write('S');
    val = Serial2.read();
    Serial.println(val);
    if (val == 'R')
    {
      //       Serial.println("R");
      //       delay(200);
      goods_color = 1;
      break;
    }
    else if (val == 'G')
    {
      //       Serial.println("G");
      //       delay(200);
      goods_color = 2;
      break;
    }
    else if (val == 'B')
    {
      //       Serial.println("B");
      //       delay(200);
      goods_color = 3;
      break;
    }
    else if (val == 'Y')
    {
      //       Serial.println("Y");
      //       delay(200);
      color_flag = 0;
      goods_color = 4;
      break;
    }

    else if(val=='H'){

      move(0,0);
      delay(700);
      for(int i = 0;i<200;i++){
          count_Line();
           delay(5);
    
  }

  break;
      
    }
  }
}

void loop()
{
  
//  
//  get_value();
//
//
//  get_value();
//Serial.println(Get_color());
   switch (goods_flag)
{
case 0:
  if (flag_back_line == 2)
  {
    move(0, 0);
    delay(200);
    Serial2.write('S');
    turn(300, -50, -50);
    Serial2.write('S');
    move(0, 0);
    Serial2.write('S');
    delay(100);
    Serial2.write('S');
    wait_get_goods();
    Serial2.write('M'); //装载完成，发送信号
    delay(50);
    Serial2.write('M'); //装载完成，发送信号
    goods_flag = 1;
    flag_back_line = 0;

  
  for (int i = 0; i < 800; i++)
    {       
    count_Line();
    delay(5);
    }
  }
  else
  {
    Last_line();
  }
  break;

case 1:

  if (color_flag)
  {
    if (Get_color() == goods_color && flag_back_line==2) //非问题物料，则根据上料的颜色倒入对应仓库
    {
      Serial2.write('P');
      delay(50);
      put_color_goods();
      Serial2.write('M'); //卸载完成，发送信号
      delay(50);
      Serial2.write('M'); //卸载完成，发送信号
      flag_back_line = 0;
      goods_flag = 2;
      check = 1;
     
    }
    else
    {

      if(flag_back_line==2&&check==1){

       for (int i = 0; i < 200; i++)
    {       
    count_Line();
    delay(5);
    }

    check = 0;
        
      }

      Last_line();


      
    }
  }
  else
  {
    if (flag_back_line % 3 == 2)
    {
      //放置黄色货物
      Serial2.write('P');
      linetime(70);
      turn(430, 40, -40);
      move(0, 0);
      delay(200);
      turn(430, -50, -50);
      move(0, 0);
      delay(200);
      putgoods();
      turn(430, 50, 50);
      move(0, 0);
      turn(450, -40, 40);
      move(0, 0);
      delay(200);
      Serial2.write('M'); //卸载完成，发送信号
      delay(50);
      Serial2.write('M'); //卸载完成，发送信号
      flag_back_line = 0;
      goods_flag = 2;
      
    }
    else
    {
      Last_line();
    }
  }

  break;

case 2:


  if (Serial2.read() == 'H')
  {


while(1){



     getCurrentIRState(&insert);

if (flag_back_line==2)
      {
        move(0,0);
        delay(7000);
          for(int i = 0;i<200;i++){
    count_Line();
    delay(5);


    move(0,0);
    delay(10000);
  }
      }

      else
      {
        Dis_Line();
      }

}
    


  }

  else
  {

      
      if (flag_back_line == 1)
      {

        
  for(int i = 0;i<200;i++){
    count_Line();
    delay(5);
    
  }
         goods_flag = 0;
        break;
      }

      else
      {
        Dis_Line();
      }
    
  }
  break;
}


}
